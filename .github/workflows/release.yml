name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      release_notes:
        description: 'Custom release notes (markdown supported)'
        required: false
        type: string
        default: ''
      include_changelog:
        description: 'Include automatic changelog'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            os: windows
            arch: x86_64
          - platform: ubuntu-latest
            os: linux
            arch: x86_64
          - platform: macos-latest
            os: macos
            arch: aarch64
          - platform: macos-13
            os: macos
            arch: x86_64

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies (ubuntu only)
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libwebkit2gtk-4.1-dev libgtk-3-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.os == 'macos' && matrix.arch == 'x86_64' && 'x86_64-apple-darwin' || '' }}

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        key: ${{ matrix.platform }}-${{ matrix.arch }}

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install frontend dependencies
      run: bun install

    - name: Build frontend
      run: bun run build

    - name: Build Tauri app
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tauriScript: npm run tauri
        
    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows'
      run: |
        mkdir -p release-artifacts
        # Copy MSI installer
        if (Test-Path "src-tauri/target/release/bundle/msi/*.msi") {
          Copy-Item "src-tauri/target/release/bundle/msi/*.msi" release-artifacts/
        }
        # Copy NSIS installer
        if (Test-Path "src-tauri/target/release/bundle/nsis/*.exe") {
          Copy-Item "src-tauri/target/release/bundle/nsis/*.exe" release-artifacts/
        }
      shell: powershell

    - name: Prepare artifacts (macOS)
      if: matrix.os == 'macos'
      run: |
        mkdir -p release-artifacts
        # Copy DMG file generated by Tauri
        if [ -f src-tauri/target/release/bundle/dmg/*.dmg ]; then
          for dmg in src-tauri/target/release/bundle/dmg/*.dmg; do
            if [ -f "$dmg" ]; then
              # Rename DMG to include architecture info
              dmg_name=$(basename "$dmg")
              new_name="${dmg_name%.*}-${{ matrix.arch }}.dmg"
              cp "$dmg" "release-artifacts/$new_name"
              echo "Copied DMG: $dmg -> release-artifacts/$new_name"
            fi
          done
        elif [ -f src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg ]; then
          for dmg in src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg; do
            if [ -f "$dmg" ]; then
              dmg_name=$(basename "$dmg")
              new_name="${dmg_name%.*}-${{ matrix.arch }}.dmg"
              cp "$dmg" "release-artifacts/$new_name"
              echo "Copied DMG: $dmg -> release-artifacts/$new_name"
            fi
          done
        else
          echo "Warning: No DMG file found. Available files:"
          find src-tauri/target -name "*.dmg" -o -name "claude-suite*" | head -10
        fi

    - name: Prepare artifacts (Linux)
      if: matrix.os == 'linux'
      run: |
        mkdir -p release-artifacts
        # Copy DEB package
        if [ -f src-tauri/target/release/bundle/deb/*.deb ]; then
          cp src-tauri/target/release/bundle/deb/*.deb release-artifacts/
        fi
        # Copy RPM package
        if [ -f src-tauri/target/release/bundle/rpm/*.rpm ]; then
          cp src-tauri/target/release/bundle/rpm/*.rpm release-artifacts/
        fi
        # Copy AppImage
        if [ -f src-tauri/target/release/bundle/appimage/*.AppImage ]; then
          cp src-tauri/target/release/bundle/appimage/*.AppImage release-artifacts/
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: claude-suite-${{ matrix.os }}-${{ matrix.arch }}
        path: release-artifacts/*
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir -p release-files
        # Copy all artifacts to release-files directory
        find artifacts -type f -exec cp {} release-files/ \;
        ls -la release-files/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: 'Claude Suite ${{ github.event.inputs.version }}'
        body: |
          ${{ github.event.inputs.release_notes != '' && github.event.inputs.release_notes || format('## 🚀 Claude Suite {0}

          {1}', github.event.inputs.version, github.event.inputs.include_changelog && '### ✨ 更新内容
          详见下方 Assets 中的变更日志或访问仓库查看完整提交历史。' || '') }}
          
          ### 📦 下载说明
          - **Windows**: 
            - `.msi` - Windows Installer 安装包
            - `.exe` - NSIS 安装包
          - **macOS**: 
            - `claude-suite-macos-aarch64.dmg` - Apple Silicon (M1/M2) 版本
            - `claude-suite-macos-x86_64.dmg` - Intel 处理器版本
          - **Linux**: 
            - `.AppImage` - 通用 Linux 应用程序
            - `.deb` - Debian/Ubuntu 软件包
            - `.rpm` - Red Hat/Fedora 软件包
          
          ### 🔧 构建信息
          - 构建时间: ${{ github.run_started_at }}
          - 提交: ${{ github.sha }}
          
          ${{ github.event.inputs.include_changelog && format('---
          Full Changelog: https://github.com/{0}/compare/{1}...HEAD', github.repository, github.event.inputs.version) || '' }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}

    - name: Upload Release Assets
      run: |
        for file in release-files/*; do
          if [ -f "$file" ]; then
            echo "Uploading $(basename "$file")"
            gh release upload ${{ github.event.inputs.version }} "$file" --clobber
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release Summary
      run: |
        echo "## 🎉 Release ${{ github.event.inputs.version }} Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Available Downloads:" >> $GITHUB_STEP_SUMMARY
        echo "- Windows (MSI Installer, NSIS Installer)" >> $GITHUB_STEP_SUMMARY
        echo "- macOS (Apple Silicon & Intel, DMG packages)" >> $GITHUB_STEP_SUMMARY
        echo "- Linux (AppImage, DEB, RPM)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Uploaded Files:" >> $GITHUB_STEP_SUMMARY
        ls -la release-files/ | while read line; do
          filename=$(echo $line | awk '{print $9}')
          if [ "$filename" != "." ] && [ "$filename" != ".." ] && [ -n "$filename" ]; then
            echo "- $filename" >> $GITHUB_STEP_SUMMARY
          fi
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
        echo "- [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [All Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY